{"version":3,"sources":["theme.js","components/Layout/index.js","components/Button/index.js","components/Input/index.js","components/Sidebar/index.js","components/WeatherPage/index.js","App.js","reportWebVitals.js","index.js"],"names":["theme","colors","blue","background","GlobalStyle","createGlobalStyle","Topbar","styled","div","props","LayoutContent","Layout","variants","primary","color","backgroundColor","secondary","Button","button","variant","Input","input","StyledSidebar","Divider","ErrorMessage","cities","name","lat","lon","Sidebar","onCityUpdated","useState","searchValue","setSearchValue","priorSearches","setPriorSearches","hasError","setHasError","handleSearchSubmitted","value","match","find","city","toLowerCase","filter","priorSearch","placeholder","onChange","target","list","id","map","i","onClick","StyledWeatherPage","CurrentWeather","FutureForecasts","ForecastCard","futureForecastArray","WeatherPage","isLoading","setIsLoading","weather","setWeather","today","moment","format","useEffect","axios","get","params","appid","process","exclude","units","then","result","data","catch","current","temp","wind_speed","humidity","uvi","day","weatherForDay","daily","getWeatherFor","add","App","setCity","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd8905b8.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const theme = {\r\n  colors: {\r\n    blue: '#5454ed',\r\n    background: '#2d3e50',\r\n  },\r\n};\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html, body {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nconst Topbar = styled.div`\r\n  height: 80px;\r\n  background-color: ${(props) => props.theme.colors.blue};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  color: white;\r\n`;\r\n\r\nconst LayoutContent = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 300px auto;\r\n`;\r\n\r\nconst Layout = (props) => (\r\n  <>\r\n    <Topbar>\r\n      <h1>Weather Dashboard</h1>\r\n    </Topbar>\r\n    <LayoutContent {...props} />\r\n  </>\r\n);\r\n\r\nexport default Layout;\r\n","import styled from 'styled-components';\r\nimport { theme } from '../../theme';\r\n\r\nconst variants = {\r\n  primary: {\r\n    color: 'white',\r\n    backgroundColor: theme.colors.blue,\r\n  },\r\n  secondary: {\r\n    color: 'black',\r\n    backgroundColor: 'lightgray',\r\n  },\r\n};\r\n\r\nconst Button = styled.button`\r\n  color: ${(props) => variants[props.variant || 'primary'].color};\r\n  background-color: ${(props) =>\r\n    variants[props.variant || 'primary'].backgroundColor};\r\n  padding: 12px 0;\r\n  border-radius: 4px;\r\n  border: none;\r\n  outline: none;\r\n`;\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nconst Input = styled.input`\r\n  padding: 12px 8px;\r\n  outline: none;\r\n  border: 1px solid darkgray;\r\n  border-radius: 4px;\r\n`;\r\n\r\nexport default Input;\r\n","import { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../Button';\r\nimport Input from '../Input';\r\n\r\nconst StyledSidebar = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  row-gap: 16px;\r\n  padding: 0 16px;\r\n`;\r\n\r\nconst Divider = styled.div`\r\n  content: '';\r\n  border: 1px solid black;\r\n`;\r\n\r\nconst ErrorMessage = styled.div``;\r\n\r\n// have prepopulated cities so that we don't have to use another API that might\r\n// cost money\r\nconst cities = [\r\n  {\r\n    name: 'Austin',\r\n    // lat and lon should use strings because of JS's tendency to lose floating\r\n    // point value accuracy\r\n    lat: '30.26759',\r\n    lon: '-97.74299',\r\n  },\r\n  {\r\n    name: 'Chicago',\r\n    lat: '41.881832',\r\n    lon: '-87.623177',\r\n  },\r\n  {\r\n    name: 'New York City',\r\n    lat: '40.730610',\r\n    lon: '-73.935242',\r\n  },\r\n  {\r\n    name: 'Orlando',\r\n    lat: '28.53833',\r\n    lon: '-81.378876',\r\n  },\r\n  {\r\n    name: 'San Francisco',\r\n    lat: '37.77986',\r\n    lon: '-122.42905',\r\n  },\r\n  {\r\n    name: 'Seattle',\r\n    lat: '47.60357',\r\n    lon: '-122.32945',\r\n  },\r\n  {\r\n    name: 'Denver',\r\n    lat: '39.73715',\r\n    lon: '-104.989174',\r\n  },\r\n  {\r\n    name: 'Atlanta',\r\n    lat: '33.74831',\r\n    lon: '-84.39111',\r\n  },\r\n];\r\n\r\nconst Sidebar = ({ onCityUpdated }) => {\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [priorSearches, setPriorSearches] = useState([]);\r\n  const [hasError, setHasError] = useState(false);\r\n\r\n  const changeHandler = ({ target }) => {\r\n    const { value } = target;\r\n    setSearchValue(value);\r\n    if (hasError) {\r\n      setHasError(false);\r\n    }\r\n  };\r\n\r\n  const handleSearchSubmitted = (value) => {\r\n    const match = cities.find(\r\n      (city) => city.name.toLowerCase() === value.toLowerCase()\r\n    );\r\n    if (!match) {\r\n      setHasError(true);\r\n    } else {\r\n      onCityUpdated(match);\r\n      setPriorSearches([\r\n        value,\r\n        ...priorSearches.filter((priorSearch) => priorSearch !== value),\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledSidebar>\r\n      <h1>Search for a City:</h1>\r\n      <Input\r\n        placeholder=\"Atlanta\"\r\n        value={searchValue}\r\n        onChange={changeHandler}\r\n        list=\"search-options\"\r\n      />\r\n      <datalist id=\"search-options\">\r\n        {cities.map((city, i) => (\r\n          <option value={city.name} key={i} />\r\n        ))}\r\n      </datalist>\r\n      {hasError && <ErrorMessage>Invalid city</ErrorMessage>}\r\n      <Button\r\n        variant=\"primary\"\r\n        onClick={() => handleSearchSubmitted(searchValue)}\r\n      >\r\n        Search\r\n      </Button>\r\n      <Divider />\r\n      {priorSearches.map((priorSearch, i) => (\r\n        <Button\r\n          variant=\"secondary\"\r\n          onClick={() => handleSearchSubmitted(priorSearch)}\r\n          key={i}\r\n        >\r\n          {priorSearch}\r\n        </Button>\r\n      ))}\r\n    </StyledSidebar>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\n\r\nconst StyledWeatherPage = styled.div`\r\n  padding: 16px;\r\n`;\r\n\r\nconst CurrentWeather = styled.div`\r\n  border: 1px solid black;\r\n  border-radius: 4px;\r\n  padding: 16px;\r\n`;\r\n\r\nconst ErrorMessage = styled.div`\r\n  color: darkred;\r\n`;\r\n\r\nconst FutureForecasts = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst ForecastCard = styled.div`\r\n  background-color: ${(props) => props.theme.colors.background};\r\n  color: white;\r\n  width: 150px;\r\n  padding: 16px;\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst futureForecastArray = [1, 2, 3, 4, 5];\r\n\r\nconst WeatherPage = ({ lon, lat, name }) => {\r\n  const [isLoading, setIsLoading] = useState(lat && lon);\r\n  const [weather, setWeather] = useState(null);\r\n  const today = moment().format('MM/DD/YYYY');\r\n\r\n  useEffect(() => {\r\n    if (!lon || !lat) {\r\n      return;\r\n    }\r\n    axios\r\n      .get(`https://api.openweathermap.org/data/2.5/onecall`, {\r\n        params: {\r\n          lat,\r\n          lon,\r\n          appid: process.env.REACT_APP_OPENWEATHER_KEY,\r\n          exclude: 'minutely,hourly,alerts',\r\n          units: 'imperial',\r\n        },\r\n      })\r\n      .then((result) => {\r\n        setWeather(result.data);\r\n        setIsLoading(false);\r\n      })\r\n      .catch(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, [lon, lat]);\r\n\r\n  const getWeatherFor = (day) => weather?.daily?.[day];\r\n\r\n  return (\r\n    <StyledWeatherPage>\r\n      {isLoading && <h2>Loading...</h2>}\r\n      {!isLoading && (\r\n        <>\r\n          <CurrentWeather>\r\n            {weather && (\r\n              <h1>\r\n                {name} ({today})\r\n              </h1>\r\n            )}\r\n            {!weather && (\r\n              <ErrorMessage>\r\n                Failed to fetch data, an unexpected error occured\r\n              </ErrorMessage>\r\n            )}\r\n            <p>Temp: {weather?.current?.temp}F</p>\r\n            <p>Wind: {weather?.current?.wind_speed} MPH</p>\r\n            <p>Humidity: {weather?.current?.humidity}%</p>\r\n            <p>UV Index: {weather?.current?.uvi}</p>\r\n          </CurrentWeather>\r\n          <h2>5-Day Forecast:</h2>\r\n          <FutureForecasts>\r\n            {futureForecastArray.map((day, i) => {\r\n              const weatherForDay = getWeatherFor(day);\r\n              return (\r\n                <ForecastCard key={i}>\r\n                  <h3>{moment().add({ day }).format('MM/DD/YYYY')}</h3>\r\n                  <p>Temp: {weatherForDay?.temp?.day}F</p>\r\n                  <p>Wind: {weatherForDay?.wind_speed} MPH</p>\r\n                  <p>Humidity: {weatherForDay?.humidity}%</p>\r\n                </ForecastCard>\r\n              );\r\n            })}\r\n          </FutureForecasts>\r\n        </>\r\n      )}\r\n    </StyledWeatherPage>\r\n  );\r\n};\r\n\r\nexport default WeatherPage;\r\n","import { ThemeProvider } from 'styled-components';\nimport { useState } from 'react';\nimport { theme, GlobalStyle } from './theme';\nimport Layout from './components/Layout';\nimport Sidebar from './components/Sidebar';\nimport WeatherPage from './components/WeatherPage';\n\nconst App = () => {\n  const [city, setCity] = useState({});\n\n  const onCityUpdated = ({ lat, lon, name }) => {\n    setCity({ lat, lon, name });\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Layout>\n        <Sidebar onCityUpdated={onCityUpdated} />\n        <WeatherPage {...city} />\n      </Layout>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}